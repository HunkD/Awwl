apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'jacoco'
apply from: '../build-common.gradle'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

retrolambda {
    javaVersion JavaVersion.VERSION_1_7
    jvmArgs '-noverify'
    defaultMethods false
    incremental true
}

android {
    compileOptions.encoding = 'utf-8'
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId 'com.hunk.nobank'
        minSdkVersion 16
        targetSdkVersion 25

        versionCode 1
        versionName '1.0'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
        }
        debug {
            minifyEnabled project.hasProperty("proguard")
            debuggable true
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile 'proguard.cfg'
            testCoverageEnabled project.hasProperty("testCoverage")
        }
    }

    // http://stackoverflow.com/questions/40137273/robolectric-test-cannot-find-font-file
    applicationVariants.all { variant ->
        def productFlavor = variant.productFlavors[0] != null ? "${variant.productFlavors[0].name.capitalize()}" : ""
        def buildType = "${variant.buildType.name.capitalize()}"
        tasks["compile${productFlavor}${buildType}UnitTestSources"].dependsOn(tasks["merge${productFlavor}${buildType}Assets"])
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    "noBank-${project.branchName}-v${variant.versionName}-b${project.buildNumber}-${variant.buildType.name}.apk".replaceAll("/", "-"))
        }
    }

    lintOptions {
        abortOnError false
        lintConfig new File(rootProject.projectDir, "lint.xml")
    }

    testOptions {
        unitTests.all {
            // Travis CI and Robolectric will failed to get the first dependency when parallel run the test.
            // maxParallelForks 4
            jvmArgs '-noverify'

            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }
}

def coverageSourceDirs = [
        '../noBank/src/main/java'
]

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../noBank/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../noBank/build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}
ext {
    supportLibVersion = '25.1.0'
}
dependencies {
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:gridlayout-v7:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.mcxiaoke.volley:library:1.0.16'
    compile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    compile 'com.squareup.okhttp:okhttp:2.4.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:1.7.0'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.robolectric:robolectric:3.1.4'
    testCompile 'org.robolectric:shadows-support-v4:3.1.4'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'

    compile project(':contract')
    compile project(':abcd')
    compile project(path: ':deeplink')
    compile project(path: ':deeplink-annotation')
    annotationProcessor project(path: ':deeplink-compiler')
}
